# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
This object represents a promise of creating a generic object
"""
type MutationResultPromiseObjectType {
  """
  This field mark the max time of waiting of the creation result
  """
  expectedResultAt: DateTime!

  """
  This field mark the timestamp of creation
  """
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type OperatorObjectType {
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
}

"""
SubscriptionUniqueId is a DTO for subscription unique id
"""
type SubscriptionUniqueIdObjectType {
  """
  Subscription unique id
  """
  id: String!
}

type ActorObjectType {
  externalId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  birthday: DateTime!
  name: String!
  addedBy: OperatorObjectType!
  editedBy: OperatorObjectType!
}

type MovieObjectType {
  externalId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  authorName: String!
  addedBy: OperatorObjectType!
  editedBy: OperatorObjectType!
}

type ReviewerObjectType {
  externalId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type ActorReviewObjectType {
  review: String!
  reviewer: ReviewerObjectType!
  movie: MovieObjectType!
  actor: ActorObjectType!
}

type CustomerObjectType {
  externalId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  gender: String!
  birthday: DateTime!
}

type BasicReviewObjectType {
  externalId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  customer: CustomerObjectType!
  movie: MovieObjectType!
}

type CommentOnReviewObjectType {
  externalId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  commentedBy: CustomerObjectType!
  commentOn: BasicReviewObjectType!
}

type ReviewTopicObjectType {
  externalId: String!
  title: String!
}

type CustomerTopicReviewObjectType {
  externalId: String!
  topic: ReviewTopicObjectType!
  score: Float!
}

type FullMovieReviewObjectType {
  externalId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  reviewer: ReviewerObjectType!
  individualReviews: [CustomerTopicReviewObjectType!]!
  movie: MovieObjectType!
  title: String!
  reviewDescription: String!
  negativePoints: String!
  positivePoints: String!
}

type MovieInfoByCustumerObjectType {
  customer: CustomerObjectType!
  movie: MovieObjectType!
  isLoved: Boolean!
  score: Float!
}

type MovieScoreObjectType {
  externalId: String!
  score: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  customer: CustomerObjectType!
  movie: MovieObjectType!
}

type LovedMoviesObjectType {
  externalId: String!
  movie: MovieObjectType!
  lovedBy: CustomerObjectType!
  deleted: Boolean!
}

type Query {
  """
  Get subscription unique id returns a unique id for subscription for allow the listen realtime events
  """
  getUniqueId: SubscriptionUniqueIdObjectType!
  getOneMovie(addedBy: ExternalIdInputType!): MovieObjectType!
  getActorsReview(movieId: ExternalIdInputType!): [ActorReviewObjectType!]!
  getMovieInfoByCustomer(
    customerId: ExternalIdInputType!
  ): MovieInfoByCustumerObjectType!
  getAllBasicMovieReview(
    movieId: ExternalIdInputType!
  ): [FullMovieReviewObjectType!]!
  getAllFullMovieReview(
    movieId: ExternalIdInputType!
  ): [FullMovieReviewObjectType!]!
  getAllCommendOnBasicReview(
    review: ExternalIdInputType!
  ): [CommentOnReviewObjectType!]!
  getOneCustomer(customerId: ExternalIdInputType!): CustomerObjectType!
}

input ExternalIdInputType {
  externalId: String!
}

type Mutation {
  registerOperator(
    subscriptionId: String!
    operator: CreateOperatorInputType!
  ): MutationResultPromiseObjectType!
  registerMovie(movie: CreateMovieInputType!): MovieObjectType!
  editMovie(movie: UpdateMovieInputType!): MovieObjectType!
  addScoreMovie(score: CreateMovieScoreInputType!): MovieScoreObjectType!
  editScoreMovie(score: UpdateMovieScoreInputType!): MovieScoreObjectType!
  registerCustomer(customer: CreateCustomerInputType!): CustomerObjectType!
  toggleLoveMovie(
    loveMovie: CreateLovedMoviesInputType!
  ): LovedMoviesObjectType!
  editActorReview(review: CreateActorReviewInput!): ActorReviewObjectType!
  addActorReview(review: UpdateActorInputType!): ActorReviewObjectType!
  addMovieReview(
    review: CreateBasicMovieReviewInputType!
  ): BasicReviewObjectType!
  editMovieReview(
    review: UpdateBasicMovieReviewInputType!
  ): BasicReviewObjectType!
  commentMovieReview(
    comment: CreateCommentOfReviewInputType!
  ): CommentOnReviewObjectType!
  updateCommentMovieReview(
    comment: UpdateCommentOfReviewInputType!
  ): CommentOnReviewObjectType!
  createFullMovieReview(
    review: CreateFullMovieReviewInputType!
  ): FullMovieReviewObjectType!
  updateFullMovieReview(
    review: UpdateFullMovieReviewInputType!
  ): FullMovieReviewObjectType!
}

input CreateOperatorInputType {
  name: String!
  email: String!
  password: String!
}

input CreateMovieInputType {
  title: String!
  authorName: String!
  addedBy: ExternalIdInputType!
  addToPlataform: ExternalIdInputType!
  movieCast: [ExternalIdInputType!]!
}

input UpdateMovieInputType {
  externalId: String!
  title: String!
  authorName: String!
  editedBy: ExternalIdInputType!
}

input CreateMovieScoreInputType {
  score: Float!
  customer: ExternalIdInputType!
  movie: ExternalIdInputType!
}

input UpdateMovieScoreInputType {
  score: Float!
  customer: ExternalIdInputType!
  movie: ExternalIdInputType!
}

input CreateCustomerInputType {
  name: String!
  email: String!
  password: String!
  gender: String!
  birthday: DateTime!
}

input CreateLovedMoviesInputType {
  movie: ExternalIdInputType!
  lovedBy: ExternalIdInputType!
}

input CreateActorReviewInput {
  review: String!
  reviewer: ExternalIdInputType!
  movie: ExternalIdInputType!
  actor: ExternalIdInputType!
}

input UpdateActorInputType {
  name: String!
  birthday: DateTime!
  editedBy: ExternalIdInputType!
}

input CreateBasicMovieReviewInputType {
  title: String!
  description: String!
  customer: ExternalIdInputType!
  movie: ExternalIdInputType!
}

input UpdateBasicMovieReviewInputType {
  title: String!
  description: String!
  customer: ExternalIdInputType!
  movie: ExternalIdInputType!
}

input CreateCommentOfReviewInputType {
  content: String!
  review: ExternalIdInputType!
  commentedBy: ExternalIdInputType!
  commentOn: ExternalIdInputType!
}

input UpdateCommentOfReviewInputType {
  content: String!
  review: ExternalIdInputType!
  commentedBy: ExternalIdInputType!
  commentOn: ExternalIdInputType!
}

input CreateFullMovieReviewInputType {
  externalId: String!
  createdAt: DateTime!
  reviewer: ExternalIdInputType!
  movie: ExternalIdInputType!
  title: String!
  reviewDescription: String!
  negativePoints: String!
  positivePoints: String!
}

input UpdateFullMovieReviewInputType {
  externalId: String!
  reviewer: ExternalIdInputType!
  movie: ExternalIdInputType
  title: String
  reviewDescription: String
  negativePoints: String
  positivePoints: String
}

type Subscription {
  """
  This subscription allow to listen the creation of operator on kafka topic
  """
  subscribeOperatorCreation(subscriptionId: String!): OperatorObjectType!
}
